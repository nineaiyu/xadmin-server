# Generated by Django 4.2.9 on 2024-01-19 08:39

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import system.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.FileField(blank=True, null=True, upload_to=system.models.upload_directory_path, verbose_name='用户头像')),
                ('nickname', models.CharField(blank=True, max_length=150, verbose_name='昵称')),
                ('sex', models.SmallIntegerField(default=0, help_text='0：男 1：女 2：保密', verbose_name='性别')),
                ('mobile', models.CharField(blank=True, default='', max_length=16, verbose_name='手机号')),
                ('remark', models.TextField(blank=True, default='', verbose_name='备注')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('menu_type', models.SmallIntegerField(choices=[(0, '目录'), (1, '菜单'), (2, '权限')], default=0, verbose_name='节点类型')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='组件英文名称')),
                ('rank', models.IntegerField(default=9999, verbose_name='菜单顺序')),
                ('path', models.CharField(max_length=256, verbose_name='路由地址')),
                ('component', models.CharField(blank=True, max_length=256, null=True, verbose_name='组件地址')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用该菜单')),
            ],
            options={
                'verbose_name': '菜单信息',
                'verbose_name_plural': '菜单信息',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='MenuMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='菜单名称')),
                ('icon', models.CharField(blank=True, max_length=256, null=True, verbose_name='菜单图标')),
                ('r_svg_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='菜单右侧额外图标iconfont名称，目前只支持iconfont')),
                ('is_show_menu', models.BooleanField(default=True, verbose_name='是否显示该菜单')),
                ('is_show_parent', models.BooleanField(default=False, verbose_name='是否显示父级菜单')),
                ('is_keepalive', models.BooleanField(default=False, help_text='开启后，会保存该页面的整体状态，刷新后会清空状态', verbose_name='是否开启页面缓存')),
                ('frame_url', models.CharField(blank=True, max_length=256, null=True, verbose_name='内嵌的iframe链接地址')),
                ('frame_loading', models.BooleanField(default=False, verbose_name='内嵌的iframe页面是否开启首次加载动画')),
                ('transition_enter', models.CharField(blank=True, max_length=256, null=True, verbose_name='当前页面进场动画')),
                ('transition_leave', models.CharField(blank=True, max_length=256, null=True, verbose_name='当前页面离场动画')),
                ('is_hidden_tag', models.BooleanField(default=False, verbose_name='当前菜单名称或自定义信息禁止添加到标签页')),
                ('dynamic_level', models.IntegerField(default=1, verbose_name='显示标签页最大数量')),
            ],
            options={
                'verbose_name': '菜单元数据',
                'verbose_name_plural': '菜单元数据',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='NoticeMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('level', models.CharField(choices=[('', 'default'), ('success', 'success'), ('primary', 'primary'), ('warning', 'warning'), ('danger', 'danger')], default='', max_length=20, verbose_name='消息级别')),
                ('notice_type', models.SmallIntegerField(choices=[(0, '系统通知'), (1, '消息通知'), (2, '系统公告')], default=1, verbose_name='消息类型')),
                ('title', models.CharField(max_length=255, verbose_name='消息标题')),
                ('message', models.TextField(blank=True, null=True, verbose_name='具体信息内容')),
                ('extra_json', models.JSONField(blank=True, null=True, verbose_name='额外的json数据')),
                ('publish', models.BooleanField(default=True, verbose_name='是否发布')),
            ],
            options={
                'verbose_name': '消息通知',
                'verbose_name_plural': '消息通知',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='角色名称')),
                ('code', models.CharField(max_length=128, unique=True, verbose_name='角色标识')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('auto_bind', models.BooleanField(default=False, verbose_name='是否绑定该角色')),
                ('menu', models.ManyToManyField(blank=True, null=True, to='system.menu', verbose_name='菜单权限')),
            ],
            options={
                'verbose_name': '角色信息',
                'verbose_name_plural': '角色信息',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('filepath', models.FileField(blank=True, null=True, upload_to=system.models.upload_directory_path, verbose_name='文件存储')),
                ('filename', models.CharField(max_length=150, verbose_name='文件原始名称')),
                ('filesize', models.IntegerField(verbose_name='文件大小')),
                ('is_tmp', models.BooleanField(default=True, verbose_name='是否临时文件')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='file_query', to=settings.AUTH_USER_MODEL, verbose_name='所属人')),
            ],
            options={
                'verbose_name': '上传的文件',
                'verbose_name_plural': '上传的文件',
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('module', models.CharField(blank=True, max_length=64, null=True, verbose_name='请求模块')),
                ('path', models.CharField(blank=True, max_length=400, null=True, verbose_name='请求地址')),
                ('body', models.TextField(blank=True, null=True, verbose_name='请求参数')),
                ('method', models.CharField(blank=True, max_length=8, null=True, verbose_name='请求方式')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='请求ip地址')),
                ('browser', models.CharField(blank=True, max_length=64, null=True, verbose_name='请求浏览器')),
                ('system', models.CharField(blank=True, max_length=64, null=True, verbose_name='请求操作系统')),
                ('response_code', models.IntegerField(blank=True, null=True, verbose_name='响应状态码')),
                ('response_result', models.TextField(blank=True, null=True, verbose_name='响应数据')),
                ('status_code', models.IntegerField(blank=True, null=True, verbose_name='请求状态码')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='NoticeUserRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='描述信息')),
                ('unread', models.BooleanField(db_index=True, default=True, verbose_name='是否未读')),
                ('notice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.noticemessage')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户已读消息',
                'verbose_name_plural': '用户已读消息',
                'ordering': ('-created_time',),
                'unique_together': {('owner', 'notice')},
                'index_together': {('owner', 'unread')},
            },
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='file',
            field=models.ManyToManyField(to='system.uploadfile', verbose_name='上传的资源'),
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='owner',
            field=models.ManyToManyField(blank=True, null=True, through='system.NoticeUserRead', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='menu',
            name='meta',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='system.menumeta', verbose_name='菜单元数据'),
        ),
        migrations.AddField(
            model_name='menu',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='system.menu', verbose_name='父节点'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='roles',
            field=models.ManyToManyField(blank=True, null=True, to='system.userrole', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
