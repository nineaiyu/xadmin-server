# Generated by Django 4.2.9 on 2024-01-23 08:30

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import common.core.models
import common.fields.image


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('mode_type', models.SmallIntegerField(choices=[(0, '或模式'), (1, '且模式')], default=0,
                                                       verbose_name='数据权限模式')),
                ('avatar', common.fields.image.ProcessedImageField(blank=True, null=True,
                                                                   upload_to=common.core.models.upload_directory_path,
                                                                   verbose_name='用户头像')),
                ('nickname', models.CharField(blank=True, max_length=150, verbose_name='昵称')),
                ('gender',
                 models.IntegerField(choices=[(0, '保密'), (1, '男'), (2, '女')], default=0, verbose_name='性别')),
                ('mobile', models.CharField(blank=True, default='', max_length=16, verbose_name='手机号')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('mode_type', models.SmallIntegerField(choices=[(0, '或模式'), (1, '且模式')], default=0,
                                                       verbose_name='数据权限模式')),
                ('name', models.CharField(max_length=256, unique=True, verbose_name='数据权限名称')),
                ('rules', models.JSONField(default=list, max_length=512, verbose_name='规则')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '数据权限',
                'verbose_name_plural': '数据权限',
            },
        ),
        migrations.CreateModel(
            name='DeptInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('mode_type', models.SmallIntegerField(choices=[(0, '或模式'), (1, '且模式')], default=0,
                                                       verbose_name='数据权限模式')),
                ('name', models.CharField(max_length=128, verbose_name='部门名称')),
                ('code', models.CharField(max_length=128, unique=True, verbose_name='部门标识')),
                ('rank', models.IntegerField(default=99, verbose_name='顺序')),
                ('auto_bind', models.BooleanField(default=False, verbose_name='是否绑定该部门')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_query_name='parent_query', to='system.deptinfo',
                                             verbose_name='父节点')),
            ],
            options={
                'verbose_name': '部门信息',
                'verbose_name_plural': '部门信息',
                'ordering': ('-rank', '-created_time'),
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('menu_type', models.SmallIntegerField(choices=[(0, '目录'), (1, '菜单'), (2, '权限')], default=0,
                                                       verbose_name='节点类型')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='组件英文名称')),
                ('rank', models.IntegerField(default=9999, verbose_name='菜单顺序')),
                ('path',
                 models.CharField(help_text='权限类型时，该参数为请求的URL', max_length=256, verbose_name='路由地址')),
                ('component',
                 models.CharField(blank=True, help_text='权限类型时，该参数为请求方式', max_length=256, null=True,
                                  verbose_name='组件地址')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用该菜单')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
            ],
            options={
                'verbose_name': '菜单信息',
                'verbose_name_plural': '菜单信息',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='NoticeMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('level', models.CharField(choices=[('', '普通通知'), ('primary', '一般通知'), ('success', '成功通知'),
                                                    ('danger', '重要通知')], default='', max_length=20,
                                           verbose_name='消息级别')),
                ('notice_type', models.SmallIntegerField(
                    choices=[(0, '系统通知'), (1, '系统公告'), (2, '用户通知'), (3, '部门通知'), (4, '角色通知')],
                    default=2, verbose_name='消息类型')),
                ('title', models.CharField(max_length=255, verbose_name='消息标题')),
                ('message', models.TextField(blank=True, null=True, verbose_name='具体信息内容')),
                ('extra_json', models.JSONField(blank=True, null=True, verbose_name='额外的json数据')),
                ('publish', models.BooleanField(default=True, verbose_name='是否发布')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
            ],
            options={
                'verbose_name': '消息通知',
                'verbose_name_plural': '消息通知',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='角色名称')),
                ('code', models.CharField(max_length=128, unique=True, verbose_name='角色标识')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('menu', models.ManyToManyField(blank=True, null=True, to='system.menu', verbose_name='菜单权限')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
            ],
            options={
                'verbose_name': '角色信息',
                'verbose_name_plural': '角色信息',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='UserLoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='登录ip地址')),
                ('browser', models.CharField(blank=True, max_length=64, null=True, verbose_name='登录浏览器')),
                ('system', models.CharField(blank=True, max_length=64, null=True, verbose_name='操作系统')),
                ('agent', models.CharField(blank=True, max_length=128, null=True, verbose_name='agent信息')),
                ('login_type',
                 models.SmallIntegerField(choices=[(0, '用户密码登录'), (1, '短信验证登录'), (2, '微信扫码登录')],
                                          default=0, verbose_name='登录类型')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
            ],
            options={
                'verbose_name': '登录日志',
                'verbose_name_plural': '登录日志',
            },
        ),
        migrations.CreateModel(
            name='UploadFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('filepath', models.FileField(blank=True, null=True, upload_to=common.core.models.upload_directory_path,
                                              verbose_name='文件存储')),
                ('filename', models.CharField(max_length=150, verbose_name='文件原始名称')),
                ('filesize', models.IntegerField(verbose_name='文件大小')),
                ('is_tmp', models.BooleanField(default=True, verbose_name='是否临时文件')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
            ],
            options={
                'verbose_name': '上传的文件',
                'verbose_name_plural': '上传的文件',
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('value', models.TextField(max_length=10240, verbose_name='配置值')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用该配置项')),
                ('key', models.CharField(max_length=256, unique=True, verbose_name='配置名称')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
            ],
            options={
                'verbose_name': '系统配置项',
                'verbose_name_plural': '系统配置项',
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('module', models.CharField(blank=True, max_length=64, null=True, verbose_name='请求模块')),
                ('path', models.CharField(blank=True, max_length=400, null=True, verbose_name='请求地址')),
                ('body', models.TextField(blank=True, null=True, verbose_name='请求参数')),
                ('method', models.CharField(blank=True, max_length=8, null=True, verbose_name='请求方式')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True, verbose_name='请求ip地址')),
                ('browser', models.CharField(blank=True, max_length=64, null=True, verbose_name='请求浏览器')),
                ('system', models.CharField(blank=True, max_length=64, null=True, verbose_name='请求操作系统')),
                ('response_code', models.IntegerField(blank=True, null=True, verbose_name='响应状态码')),
                ('response_result', models.TextField(blank=True, null=True, verbose_name='响应数据')),
                ('status_code', models.IntegerField(blank=True, null=True, verbose_name='请求状态码')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'ordering': ('-created_time',),
            },
        ),
        migrations.CreateModel(
            name='NoticeUserRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('unread', models.BooleanField(db_index=True, default=True, verbose_name='是否未读')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
                ('notice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.noticemessage')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户已读消息',
                'verbose_name_plural': '用户已读消息',
                'ordering': ('-created_time',),
                'unique_together': {('owner', 'notice')},
                'index_together': {('owner', 'unread')},
            },
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='file',
            field=models.ManyToManyField(to='system.uploadfile', verbose_name='上传的资源'),
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='modifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='modifier_query', to=settings.AUTH_USER_MODEL,
                                    verbose_name='修改人'),
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='notice_dept',
            field=models.ManyToManyField(blank=True, null=True, to='system.deptinfo', verbose_name='通知的人部门'),
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='notice_role',
            field=models.ManyToManyField(blank=True, null=True, to='system.userrole', verbose_name='通知的人角色'),
        ),
        migrations.AddField(
            model_name='noticemessage',
            name='notice_user',
            field=models.ManyToManyField(blank=True, null=True, through='system.NoticeUserRead',
                                         to=settings.AUTH_USER_MODEL, verbose_name='通知的人'),
        ),
        migrations.CreateModel(
            name='ModelLabelField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('field_type', models.SmallIntegerField(choices=[(0, '角色权限'), (1, '数据权限')], default=1,
                                                        verbose_name='字段类型')),
                ('name', models.CharField(max_length=128, verbose_name='模型/字段数值')),
                ('label', models.CharField(max_length=128, verbose_name='模型/字段名称')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to='system.modellabelfield')),
            ],
            options={
                'verbose_name': '模型字段',
                'verbose_name_plural': '模型字段',
                'unique_together': {('name', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='MenuMeta',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='菜单名称')),
                ('icon', models.CharField(blank=True, max_length=256, null=True, verbose_name='菜单图标')),
                ('r_svg_name', models.CharField(blank=True, help_text='菜单右侧额外图标iconfont名称，目前只支持iconfont',
                                                max_length=256, null=True, verbose_name='菜单右侧额外图标')),
                ('is_show_menu', models.BooleanField(default=True, verbose_name='是否显示该菜单')),
                ('is_show_parent', models.BooleanField(default=False, verbose_name='是否显示父级菜单')),
                ('is_keepalive',
                 models.BooleanField(default=False, help_text='开启后，会保存该页面的整体状态，刷新后会清空状态',
                                     verbose_name='是否开启页面缓存')),
                ('frame_url',
                 models.CharField(blank=True, max_length=256, null=True, verbose_name='内嵌的iframe链接地址')),
                ('frame_loading',
                 models.BooleanField(default=False, verbose_name='内嵌的iframe页面是否开启首次加载动画')),
                ('transition_enter',
                 models.CharField(blank=True, max_length=256, null=True, verbose_name='当前页面进场动画')),
                ('transition_leave',
                 models.CharField(blank=True, max_length=256, null=True, verbose_name='当前页面离场动画')),
                ('is_hidden_tag',
                 models.BooleanField(default=False, verbose_name='当前菜单名称或自定义信息禁止添加到标签页')),
                ('dynamic_level', models.IntegerField(default=1, verbose_name='显示标签页最大数量')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
            ],
            options={
                'verbose_name': '菜单元数据',
                'verbose_name_plural': '菜单元数据',
                'ordering': ('-created_time',),
            },
        ),
        migrations.AddField(
            model_name='menu',
            name='meta',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='system.menumeta',
                                       verbose_name='菜单元数据'),
        ),
        migrations.AddField(
            model_name='menu',
            name='model',
            field=models.ManyToManyField(blank=True, null=True, to='system.modellabelfield', verbose_name='绑定模型'),
        ),
        migrations.AddField(
            model_name='menu',
            name='modifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='modifier_query', to=settings.AUTH_USER_MODEL,
                                    verbose_name='修改人'),
        ),
        migrations.AddField(
            model_name='menu',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='system.menu', verbose_name='父节点'),
        ),
        migrations.AddField(
            model_name='deptinfo',
            name='roles',
            field=models.ManyToManyField(blank=True, null=True, to='system.userrole', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='deptinfo',
            name='rules',
            field=models.ManyToManyField(blank=True, null=True, to='system.datapermission', verbose_name='数据权限'),
        ),
        migrations.AddField(
            model_name='datapermission',
            name='dept_belong',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='dept_belong_query', to='system.deptinfo',
                                    verbose_name='数据归属部门'),
        ),
        migrations.AddField(
            model_name='datapermission',
            name='menu',
            field=models.ManyToManyField(blank=True, null=True, to='system.menu', verbose_name='权限菜单'),
        ),
        migrations.AddField(
            model_name='datapermission',
            name='modifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='modifier_query', to=settings.AUTH_USER_MODEL,
                                    verbose_name='修改人'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='dept',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_query_name='dept_query', to='system.deptinfo', verbose_name='所属部门'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='dept_belong',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='dept_belong_query', to='system.deptinfo',
                                    verbose_name='数据归属部门'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='groups',
            field=models.ManyToManyField(blank=True,
                                         help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.group',
                                         verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='modifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='+', related_query_name='modifier_query', to=settings.AUTH_USER_MODEL,
                                    verbose_name='修改人'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='roles',
            field=models.ManyToManyField(blank=True, null=True, to='system.userrole', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='rules',
            field=models.ManyToManyField(blank=True, null=True, to='system.datapermission', verbose_name='数据权限'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                         related_name='user_set', related_query_name='user', to='auth.permission',
                                         verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserPersonalConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('value', models.TextField(max_length=10240, verbose_name='配置值')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用该配置项')),
                ('key', models.CharField(max_length=256, verbose_name='配置名称')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL,
                                            verbose_name='用户ID')),
            ],
            options={
                'verbose_name': '个人配置项',
                'verbose_name_plural': '个人配置项',
                'unique_together': {('owner', 'key')},
            },
        ),
        migrations.CreateModel(
            name='FieldPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='+', related_query_name='creator_query',
                                              to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                  related_name='+', related_query_name='dept_belong_query',
                                                  to='system.deptinfo', verbose_name='数据归属部门')),
                ('field',
                 models.ManyToManyField(blank=True, null=True, to='system.modellabelfield', verbose_name='字段')),
                ('menu',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.menu', verbose_name='菜单')),
                ('modifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                               related_name='+', related_query_name='modifier_query',
                                               to=settings.AUTH_USER_MODEL, verbose_name='修改人')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='system.userrole',
                                           verbose_name='角色')),
            ],
            options={
                'verbose_name': '字段权限表',
                'verbose_name_plural': '字段权限表',
                'ordering': ('-created_time',),
                'unique_together': {('role', 'menu')},
            },
        ),
    ]